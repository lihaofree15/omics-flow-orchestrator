/*
 * Nextflow Configuration File
 * Bioinformatics Analysis Pipeline
 */

// Global default params
params {
    // Input/output options
    input               = null
    outdir              = './results'
    
    // Analysis options
    analysis_type       = 'rna-seq'
    single_end          = false
    
    // Reference genome options
    genome              = null
    fasta               = null
    gtf                 = null
    gff                 = null
    star_index          = null
    bwa_index           = null
    
    // Tool-specific options
    adapter_file        = "\$projectDir/assets/adapters.fa"
    
    // Quality control
    skip_fastqc         = false
    skip_multiqc        = false
    
    // Trimming
    skip_trimming       = false
    trimmomatic_java_opts = "-Xmx4g"
    
    // Alignment
    aligner             = 'star'
    star_two_pass       = false
    
    // Quantification  
    skip_alignment      = false
    pseudo_aligner      = 'salmon'
    
    // Max resource options
    max_memory          = '128.GB'
    max_cpus            = 16
    max_time            = '240.h'
}

// Process configuration
process {
    // Default resources
    cpus   = { check_max( 1    * task.attempt, 'cpus'   ) }
    memory = { check_max( 6.GB * task.attempt, 'memory' ) }
    time   = { check_max( 4.h  * task.attempt, 'time'   ) }

    errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'finish' }
    maxRetries    = 1
    maxErrors     = '-1'

    // Process-specific resource requirements
    withName: FASTQC {
        cpus   = { check_max( 2     * task.attempt, 'cpus'    ) }
        memory = { check_max( 4.GB  * task.attempt, 'memory'  ) }
        time   = { check_max( 12.h  * task.attempt, 'time'    ) }
    }
    
    withName: TRIMMOMATIC {
        cpus   = { check_max( 4     * task.attempt, 'cpus'    ) }
        memory = { check_max( 8.GB  * task.attempt, 'memory'  ) }
        time   = { check_max( 8.h   * task.attempt, 'time'    ) }
    }
    
    withName: STAR_ALIGN {
        cpus   = { check_max( 8     * task.attempt, 'cpus'    ) }
        memory = { check_max( 32.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 8.h   * task.attempt, 'time'    ) }
    }
}

// Execution profiles
profiles {
    debug { process.beforeScript = 'echo \$HOSTNAME' }
    
    docker {
        docker.enabled         = true
        docker.userEmulation   = true
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    
    singularity {
        singularity.enabled    = true
        singularity.autoMounts = true
        docker.enabled         = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    
    test {
        params.max_cpus   = 2
        params.max_memory = '6.GB'
        params.max_time   = '6.h'
    }
}

// Export these variables to prevent local Python/R libraries from conflicting with those in the container
env {
    PYTHONNOUSERSITE = 1
    R_PROFILE_USER   = "/.Rprofile"
    R_ENVIRON_USER   = "/.Renviron"
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled = true
    file    = "\${params.outdir}/pipeline_info/execution_timeline_\${trace_timestamp}.html"
}
report {
    enabled = true
    file    = "\${params.outdir}/pipeline_info/execution_report_\${trace_timestamp}.html"
}
trace {
    enabled = true
    file    = "\${params.outdir}/pipeline_info/execution_trace_\${trace_timestamp}.txt"
}
dag {
    enabled = true
    file    = "\${params.outdir}/pipeline_info/pipeline_dag_\${trace_timestamp}.svg"
}

manifest {
    name            = 'bioinformatics-platform/workflow'
    author          = 'Bioinformatics Platform Team'
    homePage        = 'https://github.com/bioinformatics-platform/workflow'
    description     = 'Modular bioinformatics analysis pipeline'
    mainScript      = 'main.nf'
    nextflowVersion = '!>=21.10.3'
    version         = '1.0.0'
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '\${params.max_memory}' is not valid! Using default value: \$obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '\${params.max_time}' is not valid! Using default value: \$obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '\${params.max_cpus}' is not valid! Using default value: \$obj"
            return obj
        }
    }
}